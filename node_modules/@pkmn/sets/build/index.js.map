{"version":3,"sources":["/Users/kjs/Code/src/github.com/pkmn/ps/sets/build/index.js","../src/sets.ts","../src/teams.ts"],"names":["tr","team"],"mappings":"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AACS,MAAA;AACL,QAAA;AACK,QAAA;AACT,MAAA;AACM,MAAA;AACG,MAAA;AACA,QAAA;AACD,QAAA;AACJ,QAAA;AACK,QAAA;AACL,QAAA;AACG,MAAA;AACH,QAAA;AACA,QAAA;AACJ,MAAA;AACS,IAAA;AACF,MAAA;AACL,MAAA;AACO,IAAA;AACF,MAAA;AACL,MAAA;AACO,IAAA;AACC,MAAA;AACD,IAAA;AACF,MAAA;AACG,MAAA;AACD,IAAA;AACF,MAAA;AACL,MAAA;AACO,IAAA;AACF,MAAA;AACL,MAAA;AACO,IAAA;AACF,MAAA;AACL,MAAA;AACO,IAAA;AACF,MAAA;AACL,MAAA;AACO,IAAA;AACF,MAAA;AACL,MAAA;AACO,IAAA;AACP,MAAA;AACO,IAAA;AACF,MAAA;AACD,MAAA;AACG,MAAA;AACT,MAAA;AACQ,QAAA;AACF,QAAA;AACE,QAAA;AACA,QAAA;AACD,QAAA;AACC,QAAA;AACR,MAAA;AACS,IAAA;AACF,MAAA;AACD,MAAA;AACG,MAAA;AACT,MAAA;AACQ,QAAA;AACF,QAAA;AACE,QAAA;AACF,QAAA;AACC,QAAA;AACD,QAAA;AACE,QAAA;AACR,MAAA;AACS,IAAA;AACL,MAAA;AACA,MAAA;AAEG,MAAA;AACH,MAAA;AACK,IAAA;AACF,MAAA;AACE,MAAA;AACF,MAAA;AAED,MAAA;AACF,MAAA;AACK,QAAA;AACD,QAAA;AACC,QAAA;AACH,UAAA;AACE,UAAA;AACC,UAAA;AACD,YAAA;AACJ,UAAA;AACF,QAAA;AACF,MAAA;AACI,MAAA;AACA,QAAA;AACJ,MAAA;AACQ,MAAA;AACV,IAAA;AACF,EAAA;AAEa,EAAA;AACf;AAES;AACE,EAAA;AACK,IAAA;AACd,EAAA;AACS,EAAA;AACK,IAAA;AACd,EAAA;AACS,EAAA;AACM,IAAA;AACf,EAAA;AACO,EAAA;AACT;AAES;AACE,EAAA;AACA,IAAA;AACT,EAAA;AACS,EAAA;AACK,IAAA;AACd,EAAA;AACS,EAAA;AACA,IAAA;AAET,EAAA;AACO,EAAA;AACT;AAES;AACI,EAAA;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","file":"/Users/kjs/Code/src/github.com/pkmn/ps/sets/build/index.js","sourcesContent":[null,"import {\n  GenerationNum,\n  HPTypeName,\n  ID,\n  PokemonSet,\n  StatID,\n  StatsTable,\n} from '@pkmn/types';\n\nexport interface DataTable<T> {\n  get(name: string): Readonly<T> | undefined;\n}\n\ninterface Nature {\n  name: string;\n  plus?: Exclude<StatID, 'hp'>;\n  minus?: Exclude<StatID, 'hp'>;\n}\n\nexport interface Data {\n  forGen?(gen: GenerationNum): Data;\n\n  readonly gen: GenerationNum;\n\n  readonly abilities: DataTable<{name: string}>;\n  readonly items: DataTable<{name: string}>;\n  readonly moves: DataTable<{name: string}>;\n  readonly natures: DataTable<Nature>;\n  readonly species: DataTable<{\n    name: string;\n    baseSpecies: string;\n    baseStats: StatsTable;\n    gender?: string;\n    battleOnly?: string | string[];\n    abilities?: {0: string; 1?: string; H?: string; S?: string};\n    types?: string[];\n    requiredTeraType?: string;\n  }>;\n}\n\nexport function toID(s: any) {\n  if (typeof s !== 'string' && typeof s !== 'number') return '';\n  return ('' + s).toLowerCase().replace(/[^a-z0-9]+/g, '') as ID;\n}\n\nconst STAT_NAMES: Readonly<StatsTable<string>> = {\n  hp: 'HP',\n  atk: 'Atk',\n  def: 'Def',\n  spa: 'SpA',\n  spd: 'SpD',\n  spe: 'Spe',\n};\n\nconst STATS = Object.keys(STAT_NAMES) as readonly StatID[];\n\nconst DECODE_STAT: Readonly<{[name: string]: StatID}> = {\n  HP: 'hp',\n  hp: 'hp',\n  Attack: 'atk',\n  Atk: 'atk',\n  atk: 'atk',\n  Defense: 'def',\n  Def: 'def',\n  def: 'def',\n  'Special Attack': 'spa',\n  SpA: 'spa',\n  SAtk: 'spa',\n  SpAtk: 'spa',\n  spa: 'spa',\n  Special: 'spa',\n  spc: 'spa',\n  Spc: 'spa',\n  'Special Defense': 'spd',\n  SpD: 'spd',\n  SDef: 'spd',\n  SpDef: 'spd',\n  spd: 'spd',\n  Speed: 'spe',\n  Spe: 'spe',\n  Spd: 'spe',\n  spe: 'spe',\n};\n\nexport type {PokemonSet} from '@pkmn/types';\n\nexport const Sets = new class {\n  pack(s: Partial<PokemonSet>) {\n    return Sets.packSet(s);\n  }\n\n  packSet(s: Partial<PokemonSet>) {\n    let buf = '';\n    // name\n    buf += s.name || s.species;\n\n    // species\n    const packed = packName(s.species);\n    buf += '|' + (packName(s.name || s.species) === packed ? '' : packed);\n\n    // item\n    buf += '|' + packName(s.item);\n\n    // ability\n    buf += '|' + (packName(s.ability) || '-');\n\n    // moves\n    let hasHP = '';\n    buf += '|';\n    if (s.moves) {\n      for (let j = 0; j < s.moves.length; j++) {\n        const packedMove = packName(s.moves[j]);\n        if (j && !packedMove) continue;\n        buf += (j ? ',' : '') + packedMove;\n        if (packedMove.substr(0, 11) === 'HiddenPower' && packedMove.length > 11) {\n          hasHP = packedMove.slice(11);\n        }\n      }\n    }\n\n    // nature\n    buf += '|' + (s.nature || '');\n\n    // evs\n    let evs = '|';\n    if (s.evs) {\n      evs = '|' +\n        (s.evs['hp'] || '') + ',' +\n        (s.evs['atk'] || '') + ',' +\n        (s.evs['def'] || '') + ',' +\n        (s.evs['spa'] || '') + ',' +\n        (s.evs['spd'] || '') + ',' +\n        (s.evs['spe'] || '');\n    }\n    if (evs === '|,,,,,') {\n      buf += '|';\n    } else {\n      buf += evs;\n    }\n\n    // gender\n    if (s.gender) {\n      buf += '|' + s.gender;\n    } else {\n      buf += '|';\n    }\n\n    const getIV = (stat: StatID) =>\n      !('ivs' in s) || s.ivs![stat] === 31 || s.ivs![stat] === undefined\n        ? ''\n        : s.ivs![stat].toString();\n\n    // ivs\n    let ivs = '|';\n    if (s.ivs) {\n      ivs = '|' +\n        getIV('hp') + ',' +\n        getIV('atk') + ',' +\n        getIV('def') + ',' +\n        getIV('spa') + ',' +\n        getIV('spd') + ',' +\n        getIV('spe');\n    }\n    if (ivs === '|,,,,,') {\n      buf += '|';\n    } else {\n      buf += ivs;\n    }\n\n    // shiny\n    if (s.shiny) {\n      buf += '|S';\n    } else {\n      buf += '|';\n    }\n\n    // level\n    if (s.level && s.level !== 100) {\n      buf += '|' + s.level;\n    } else {\n      buf += '|';\n    }\n\n    // happiness\n    if (s.happiness !== undefined && s.happiness !== 255) {\n      buf += '|' + s.happiness;\n    } else {\n      buf += '|';\n    }\n\n    const dynamax = s.dynamaxLevel !== undefined && s.dynamaxLevel !== 10;\n    if (s.pokeball || (s.hpType && !hasHP) || s.gigantamax || dynamax || s.teraType) {\n      buf += ',' + (s.hpType || '');\n      buf += ',' + packName(s.pokeball || '');\n      buf += ',' + (s.gigantamax ? 'G' : '');\n      buf += ',' + (dynamax ? s.dynamaxLevel : '');\n      buf += ',' + (s.teraType || '');\n    }\n\n    return buf;\n  }\n\n  exportSet(s: Partial<PokemonSet>, data?: Data) {\n    let buf = '';\n    let species = s.species || s.name || '';\n    species = data?.species.get(species)?.name || species;\n    if (s.name && s.name !== species) {\n      buf += '' + s.name + ' (' + species + ')';\n    } else {\n      buf += '' + species;\n    }\n    if (!data || data.gen >= 2) {\n      if (s.gender === 'M') buf += ' (M)';\n      if (s.gender === 'F') buf += ' (F)';\n    }\n    if (s.item) {\n      const item = data?.items.get(s.item)?.name ?? s.item;\n      buf += ' @ ' + item;\n    }\n    buf += '  \\n';\n    if (s.ability && (!data || data?.gen >= 3)) {\n      const ability = data?.abilities.get(s.ability)?.name ?? s.ability;\n      buf += 'Ability: ' + ability + '  \\n';\n    }\n    if (s.level && s.level !== 100) {\n      buf += 'Level: ' + s.level + '  \\n';\n    }\n    if (s.shiny && (!data || data.gen >= 2)) {\n      buf += 'Shiny: Yes  \\n';\n    }\n    if (typeof s.happiness === 'number' && s.happiness !== 255 &&\n        !isNaN(s.happiness) && (!data || data.gen >= 2)) {\n      buf += 'Happiness: ' + s.happiness + '  \\n';\n    }\n    if (s.pokeball) {\n      buf += 'Pokeball: ' + s.pokeball + '  \\n';\n    }\n    if (s.hpType) {\n      buf += 'Hidden Power: ' + s.hpType + '  \\n';\n    }\n    if (typeof s.dynamaxLevel === 'number' && s.dynamaxLevel !== 10 && !isNaN(s.dynamaxLevel)) {\n      buf += 'Dynamax Level: ' + s.dynamaxLevel + '  \\n';\n    }\n    if (s.gigantamax) {\n      buf += 'Gigantamax: Yes  \\n';\n    }\n    if (s.teraType) {\n      const d = data?.species.get(species);\n      buf += 'Tera Type: ' + (s.teraType || d?.requiredTeraType || d?.types?.[0]) + '  \\n';\n    }\n    let first = true;\n    if (s.evs && (!data || data.gen >= 3)) {\n      for (const stat of STATS) {\n        if (!s.evs[stat]) continue;\n        if (first) {\n          buf += 'EVs: ';\n          first = false;\n        } else {\n          buf += ' / ';\n        }\n        buf += '' + s.evs[stat] + ' ' + STAT_NAMES[stat];\n      }\n    }\n    if (!first) {\n      buf += '  \\n';\n    }\n    if (s.nature && (!data || data.gen >= 3)) {\n      buf += '' + s.nature + ' Nature' + '  \\n';\n    }\n    first = true;\n    if (s.ivs) {\n      let defaultIVs = true;\n      let hpType: HPTypeName | undefined = undefined;\n      if (s.moves) {\n        for (const move of s.moves) {\n          hpType = getHiddenPowerType(move);\n          if (hpType) {\n            const hpIVs = getHiddenPowerIVs(hpType, data);\n            // not a valid Hidden Power type\n            if (!hpIVs) continue;\n\n            for (const stat of STATS) {\n              if ((s.ivs[stat] === undefined ? 31 : s.ivs[stat]) !== (hpIVs[stat] || 31)) {\n                defaultIVs = false;\n                break;\n              }\n            }\n          }\n        }\n      }\n      if (defaultIVs && !hpType) {\n        for (const stat of STATS) {\n          if (s.ivs[stat] !== 31 && s.ivs[stat] !== undefined) {\n            defaultIVs = false;\n            break;\n          }\n        }\n      }\n      if (!defaultIVs) {\n        for (const stat of STATS) {\n          if (typeof s.ivs[stat] === 'undefined' || isNaN(s.ivs[stat]) || s.ivs[stat] === 31) {\n            continue;\n          }\n          if (first) {\n            buf += 'IVs: ';\n            first = false;\n          } else {\n            buf += ' / ';\n          }\n          buf += '' + s.ivs[stat] + ' ' + STAT_NAMES[stat];\n        }\n      }\n    }\n    if (!first) {\n      buf += '  \\n';\n    }\n    if (s.moves) {\n      for (let move of s.moves) {\n        if (move) {\n          move = data?.moves.get(move)?.name ?? move;\n          buf += '- ' + exportMove(move) + '  \\n';\n        }\n      }\n    }\n    buf += '\\n';\n\n    return buf;\n  }\n\n  unpack(buf: string, data?: Data) {\n    return Sets.unpackSet(buf, data);\n  }\n\n  unpackSet(buf: string, data?: Data) {\n    return _unpack(buf, 0, 0, data).set;\n  }\n\n  importSet(buf: string, data?: Data) {\n    return _import(buf.split('\\n'), 0, data).set;\n  }\n\n  toJSON(s: PokemonSet) {\n    return JSON.stringify(s);\n  }\n\n  fromJSON(json: string) {\n    if (!json.startsWith('{') || !json.endsWith('}')) return undefined;\n    // BUG: this is completely unvalidated...\n    return JSON.parse(json) as PokemonSet;\n  }\n\n  toString(s: Partial<PokemonSet>, data?: Data) {\n    return Sets.exportSet(s, data);\n  }\n\n  fromString(str: string) {\n    return Sets.importSet(str);\n  }\n\n  // NOTE: to properly dedupe you still must compare computed stats\n  canonicalize(s: Partial<PokemonSet>, data: Data) {\n    const species = data.species.get(s.species!)!;\n    s.species = toID(species.battleOnly ? species.baseSpecies : species.name);\n    s.name = undefined;\n\n    s.item = data.gen >= 2 && s.item ? toID(s.item) : undefined;\n    s.ability =\n      data.gen >= 3 ? toID(s.ability ? s.ability : species.abilities![0]) : undefined;\n    s.gender = data.gen >= 2 && s.gender && s.gender !== species.gender ? s.gender : undefined;\n    s.level = s.level || 100;\n\n    let maxed = true;\n    if (!s.ivs) {\n      s.ivs = {hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31};\n    } else {\n      for (const stat of STATS) {\n        s.ivs[stat] = s.ivs[stat] ?? 31;\n        if (data.gen < 3) s.ivs[stat] = toIV(toDV(s.ivs[stat]));\n        if (s.ivs[stat] !== 31) maxed = false;\n      }\n    }\n\n    const nature = data.gen < 3 ? undefined : data.natures.get(s.nature || 'serious');\n    s.nature = nature && toID(nature.name);\n\n    let hpType = s.hpType as HPTypeName | undefined;\n    let happiness = '';\n    let swordsdance = false;\n    const moves = [];\n    for (const move of s.moves!) {\n      let id = toID(move);\n      if (id === 'return' || id === 'frustration') {\n        happiness = id;\n      } else if (id === 'swordsdance') {\n        swordsdance = true;\n      } else if (id.startsWith('hiddenpower')) {\n        if (id === 'hiddenpower') {\n          const type = s.hpType || getHiddenPower(data.gen, s.ivs).type;\n          id = `${id}${type}` as ID;\n        } else {\n          hpType = (id.substr(11, 1).toUpperCase() + id.substr(12)) as HPTypeName;\n        }\n      }\n      moves.push(id);\n    }\n    s.moves = moves.sort((a, b) => a.localeCompare(b));\n\n    const base = data.species.get(s.species)!.baseStats;\n    s.evs = s.evs || {} as any as StatsTable;\n    for (const stat of STATS) {\n      if (data.gen < 3) {\n        s.evs[stat] = s.evs[stat] ?? 252;\n      } else {\n        if (!s.evs[stat]) {\n          s.evs[stat] = 0;\n        } else {\n          const val = calc(data.gen, stat, base[stat], s.ivs[stat], s.evs[stat], s.level, nature);\n          if (stat === 'hp') {\n            s.evs[stat] = base[stat] === 1 ? 0\n              : Math.max(0, (Math.ceil(((val - s.level - 10) * 100) / s.level) -\n                2 * base[stat] - s.ivs[stat]) * 4);\n          } else {\n            const n = !nature ? 1 : nature.plus === stat ? 1.1 : nature.minus === stat ? 0.9 : 1;\n            s.evs[stat] = Math.max(0, (Math.ceil(((Math.ceil(val / n) - 5) * 100) / s.level) -\n              2 * base[stat] - s.ivs[stat]) * 4);\n          }\n        }\n      }\n    }\n\n    if (data.gen === 2 && s.species === 'marowak' && s.item === 'thickclub' &&\n      swordsdance && s.level === 100) {\n      const iv = Math.floor(s.ivs.atk / 2) * 2;\n      while (s.evs.atk > 0 && 2 * 80 + iv + Math.floor(s.evs.atk / 4) + 5 > 255) {\n        s.evs.atk -= 4;\n      }\n    }\n\n    const canBottle = data.gen >= 7 && s.level === 100;\n    if (hpType && maxed) {\n      const ivs = data.gen === 2 ? HP[hpType].dvs : HP[hpType].ivs;\n      for (const stat of STATS) {\n        if (data.gen === 2) {\n          s.ivs[stat] = stat in ivs ? toIV(ivs[stat]!) : 31;\n        } else if (!canBottle) {\n          s.ivs[stat] = ivs[stat] ?? 31;\n        }\n      }\n      if (data.gen === 2) s.ivs.hp = toIV(getHPDV(s.ivs));\n    }\n\n    s.hpType = hpType && canBottle ? hpType : undefined;\n\n    if (happiness === 'return') {\n      s.happiness = 255;\n    } else if (happiness === 'frustration') {\n      s.happiness = 0;\n    } else {\n      s.happiness = undefined;\n    }\n\n    s.shiny = data.gen >= 2 && s.shiny ? s.shiny : undefined;\n    s.pokeball = undefined;\n    s.dynamaxLevel = data.gen === 8 ? s.dynamaxLevel : undefined;\n    s.gigantamax = data.gen === 8 && s.gigantamax ? s.gigantamax : undefined;\n    s.teraType = data.gen === 9 ? s.teraType : undefined;\n\n    return s;\n  }\n};\n\nconst ABILITY = ['', '0', '1', 'H', 'S'];\n\nexport function _unpack(buf: string, i = 0, j = 0, data?: Data) {\n  const s: Partial<PokemonSet> = {};\n  // name\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  s.name = buf.substring(i, j);\n  i = j + 1;\n\n  // species\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  s.species = unpackName(buf.substring(i, j), data?.species) || s.name;\n  i = j + 1;\n\n  // item\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  s.item = unpackName(buf.substring(i, j), data?.items);\n  i = j + 1;\n\n  // ability\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  let ability = unpackName(buf.substring(i, j), data?.abilities);\n  if (ability === '-') {\n    ability = '';\n  } else if (ABILITY.includes(ability)) {\n    if (data) {\n      const species = data.species.get(s.species);\n      // Workaround for bug introduced by smogon/pokemon-showdown/817236b0\n      if (species?.baseSpecies === 'Zygarde' && ability === 'H') {\n        ability = 'Power Construct';\n      } else if (species?.abilities) {\n        ability = species.abilities[ability as '0' || '0'];\n      }\n    }\n    if (ability !== '' && !ability) return {i, j};\n  }\n  s.ability = ability;\n  i = j + 1;\n\n  // moves\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  s.moves = buf.substring(i, j).split(',', 24).filter(x => x).map(m => unpackName(m, data?.moves));\n  i = j + 1;\n\n  // nature\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  s.nature = unpackName(buf.substring(i, j), data?.natures);\n  i = j + 1;\n\n  // evs\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  s.evs = {hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0};\n  if (j !== i) {\n    const evstr = buf.substring(i, j);\n    if (evstr.length > 5) {\n      const st = evstr.split(',');\n      s.evs.hp = Number(st[0]) || s.evs.hp;\n      s.evs.atk = Number(st[1]) || s.evs.atk;\n      s.evs.def = Number(st[2]) || s.evs.def;\n      s.evs.spa = Number(st[3]) || s.evs.spa;\n      s.evs.spd = Number(st[4]) || s.evs.spd;\n      s.evs.spe = Number(st[5]) || s.evs.spe;\n    }\n  }\n  i = j + 1;\n\n  // gender\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  if (i !== j) s.gender = buf.substring(i, j);\n  i = j + 1;\n\n  // ivs\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  s.ivs = {hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31};\n  if (j !== i) {\n    const st = buf.substring(i, j).split(',', 6);\n    s.ivs.hp = st[0] === '' ? 31 : Number(st[0]) || 0;\n    s.ivs.atk = st[1] === '' ? 31 : Number(st[1]) || 0;\n    s.ivs.def = st[2] === '' ? 31 : Number(st[2]) || 0;\n    s.ivs.spa = st[3] === '' ? 31 : Number(st[3]) || 0;\n    s.ivs.spd = st[4] === '' ? 31 : Number(st[4]) || 0;\n    s.ivs.spe = st[5] === '' ? 31 : Number(st[5]) || 0;\n  }\n  i = j + 1;\n\n  // shiny\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  if (i !== j) s.shiny = true;\n  i = j + 1;\n\n  // level\n  j = buf.indexOf('|', i);\n  if (j < 0) return {i, j};\n  if (i !== j) s.level = parseInt(buf.substring(i, j));\n  i = j + 1;\n\n  // happiness\n  j = buf.indexOf(']', i);\n  let misc;\n  if (j < 0) {\n    if (i < buf.length) misc = buf.substring(i).split(',', 6);\n  } else {\n    if (i !== j) misc = buf.substring(i, j).split(',', 6);\n  }\n\n  if (misc) {\n    s.happiness = (misc[0] ? Number(misc[0]) : 255);\n    s.hpType = misc[1] || '';\n    s.pokeball = unpackName(misc[2] || '', data?.items);\n    s.gigantamax = !!misc[3];\n    s.dynamaxLevel = (misc[4] ? Number(misc[4]) : 10);\n    s.teraType = misc[5] || '';\n  }\n\n  return {set: s as PokemonSet, i, j};\n}\n\nconst NATURE_REGEX = /^[A-Za-z]+ (N|n)ature/;\n\nexport function _import(lines: string[], i = 0, data?: Data) {\n  let s: Partial<PokemonSet> | undefined = undefined;\n  for (; i < lines.length; i++) {\n    let line = lines[i].trim();\n    if (line === '' || line === '---' || line.substr(0, 3) === '===' ||\n        line.includes('|')) {\n      return {set: s as PokemonSet, line: i};\n    } else if (!s) {\n      s = {name: '', species: '', gender: ''};\n      const atIndex = line.lastIndexOf(' @ ');\n      if (atIndex !== -1) {\n        s.item = line.substr(atIndex + 3);\n        if (toID(s.item) === 'noitem') s.item = '';\n        line = line.substr(0, atIndex);\n      }\n      if (line.substr(line.length - 4) === ' (M)') {\n        s.gender = 'M';\n        line = line.substr(0, line.length - 4);\n      }\n      if (line.substr(line.length - 4) === ' (F)') {\n        s.gender = 'F';\n        line = line.substr(0, line.length - 4);\n      }\n      const parenIndex = line.lastIndexOf(' (');\n      if (line.substr(line.length - 1) === ')' && parenIndex !== -1) {\n        line = line.substr(0, line.length - 1);\n        const sub = line.substr(parenIndex + 2);\n        s.species = data?.species.get(sub)?.name ?? sub;\n        line = line.substr(0, parenIndex);\n        s.name = line;\n      } else {\n        s.species = data?.species.get(line)?.name ?? line;\n        s.name = '';\n      }\n    } else if (line.substr(0, 7) === 'Trait: ') {\n      line = line.substr(7);\n      s.ability = line;\n    } else if (line.substr(0, 9) === 'Ability: ') {\n      line = line.substr(9);\n      s.ability = line;\n    } else if (line === 'Shiny: Yes') {\n      s.shiny = true;\n    } else if (line.substr(0, 7) === 'Level: ') {\n      line = line.substr(7);\n      s.level = +line;\n    } else if (line.substr(0, 11) === 'Happiness: ') {\n      line = line.substr(11);\n      s.happiness = +line;\n    } else if (line.substr(0, 10) === 'Pokeball: ') {\n      line = line.substr(10);\n      s.pokeball = line;\n    } else if (line.substr(0, 14) === 'Hidden Power: ') {\n      line = line.substr(14);\n      s.hpType = line;\n    } else if (line.substr(0, 11) === 'Tera Type: ') {\n      line = line.substr(11);\n      s.teraType = line;\n    } else if (line.substr(0, 15) === 'Dynamax Level: ') {\n      line = line.substr(15);\n      s.dynamaxLevel = +line;\n    } else if (line === 'Gigantamax: Yes') {\n      s.gigantamax = true;\n    } else if (line.substr(0, 5) === 'EVs: ') {\n      line = line.substr(5);\n      const evLines = line.split(' / ');\n      s.evs = {hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0};\n      for (const evLine of evLines) {\n        const spaceIndex = evLine.indexOf(' ');\n        if (spaceIndex === -1) continue;\n        const stat = DECODE_STAT[evLine.substr(spaceIndex + 1)];\n        const val = parseInt(evLine.substr(0, spaceIndex));\n        if (!stat) continue;\n        s.evs[stat] = val;\n      }\n    } else if (line.substr(0, 5) === 'IVs: ') {\n      line = line.substr(5);\n      const ivLines = line.split(' / ');\n      s.ivs = {hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31};\n      for (const ivLine of ivLines) {\n        const spaceIndex = ivLine.indexOf(' ');\n        if (spaceIndex === -1) continue;\n        const stat = DECODE_STAT[ivLine.substr(spaceIndex + 1)];\n        let val = parseInt(ivLine.substr(0, spaceIndex));\n        if (!stat) continue;\n        if (isNaN(val)) val = 31;\n        s.ivs[stat] = val;\n      }\n    } else if (NATURE_REGEX.exec(line)) {\n      let natureIndex = line.indexOf(' Nature');\n      if (natureIndex === -1) natureIndex = line.indexOf(' nature');\n      // if (natureIndex === -1) continue; // Can't happen or we wouldn't match\n      line = line.substr(0, natureIndex);\n      if (line !== 'undefined') s.nature = line;\n    } else if (line.substr(0, 1) === '-' || line.substr(0, 1) === '~') {\n      line = line.substr(1);\n      if (line.substr(0, 1) === ' ') line = line.substr(1);\n      if (!s.moves) s.moves = [];\n\n      const hpType = getHiddenPowerType(line);\n      if (hpType) {\n        line = 'Hidden Power ' + hpType.toString();\n        const hpIVs = getHiddenPowerIVs(hpType, data);\n        if (!s.ivs && hpIVs) {\n          s.ivs = {hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31};\n          let stat: StatID;\n          for (stat in hpIVs) {\n            s.ivs[stat] = hpIVs[stat]!;\n          }\n        }\n      }\n      if (line === 'Frustration' && s.happiness === undefined) {\n        s.happiness = 0;\n      }\n      s.moves.push(line);\n    }\n  }\n\n  return {set: s!, line: i + 1};\n}\n\nfunction getHiddenPowerType(move: string) {\n  if (move.substr(0, 14) === 'Hidden Power [') {\n    return move.substr(14, move.length - 15) as HPTypeName;\n  }\n  if (move.substr(0, 13) === 'Hidden Power ') {\n    return move.substr(13) as HPTypeName;\n  }\n  if (move.substr(0, 11) === 'hiddenpower') {\n    return (move.substr(11, 1).toUpperCase() + move.substr(12)) as HPTypeName;\n  }\n  return undefined;\n}\n\nfunction exportMove(move: string) {\n  if (move.substr(0, 14) === 'Hidden Power [') {\n    return move;\n  }\n  if (move.substr(0, 13) === 'Hidden Power ') {\n    return move.substr(0, 13) + '[' + move.substr(13) + ']';\n  }\n  if (move.substr(0, 11) === 'hiddenpower') {\n    return 'Hidden Power ' +\n        '[' + move.substr(11, 1).toUpperCase() + move.substr(12) + ']';\n  }\n  return move;\n}\n\nfunction packName(name: string | undefined | null) {\n  if (!name) return '';\n  return name.replace(/[^A-Za-z0-9]+/g, '');\n}\n\nfunction unpackName(\n  name: string,\n  data?: {get: (name: string) => {name: string; exists?: boolean} | undefined}\n) {\n  if (!name) return '';\n  if (data) {\n    const obj = data.get(name);\n    if (obj?.exists) return obj.name;\n  }\n  return (name.replace(/([0-9]+)/g, ' $1 ')\n    .replace(/([A-Z])/g, ' $1')\n    .replace(/[ ][ ]/g, ' ')\n    .trim());\n}\n\nconst HP: {[type in HPTypeName]: {ivs: Partial<StatsTable>; dvs: Partial<StatsTable>}} = {\n  Bug: {ivs: {atk: 30, def: 30, spd: 30}, dvs: {atk: 13, def: 13}},\n  Dark: {ivs: {}, dvs: {}},\n  Dragon: {ivs: {atk: 30}, dvs: {def: 14}},\n  Electric: {ivs: {spa: 30}, dvs: {atk: 14}},\n  Fighting: {ivs: {def: 30, spa: 30, spd: 30, spe: 30}, dvs: {atk: 12, def: 12}},\n  Fire: {ivs: {atk: 30, spa: 30, spe: 30}, dvs: {atk: 14, def: 12}},\n  Flying: {ivs: {hp: 30, atk: 30, def: 30, spa: 30, spd: 30}, dvs: {atk: 12, def: 13}},\n  Ghost: {ivs: {def: 30, spd: 30}, dvs: {atk: 13, def: 14}},\n  Grass: {ivs: {atk: 30, spa: 30}, dvs: {atk: 14, def: 14}},\n  Ground: {ivs: {spa: 30, spd: 30}, dvs: {atk: 12}},\n  Ice: {ivs: {atk: 30, def: 30}, dvs: {def: 13}},\n  Poison: {ivs: {def: 30, spa: 30, spd: 30}, dvs: {atk: 12, def: 14}},\n  Psychic: {ivs: {atk: 30, spe: 30}, dvs: {def: 12}},\n  Rock: {ivs: {def: 30, spd: 30, spe: 30}, dvs: {atk: 13, def: 12}},\n  Steel: {ivs: {spd: 30}, dvs: {atk: 13}},\n  Water: {ivs: {atk: 30, def: 30, spa: 30}, dvs: {atk: 14, def: 13}},\n};\n\nconst HP_TYPES: HPTypeName[] = [\n  'Fighting', 'Flying', 'Poison', 'Ground', 'Rock', 'Bug', 'Ghost', 'Steel',\n  'Fire', 'Water', 'Grass', 'Electric', 'Psychic', 'Ice', 'Dragon', 'Dark',\n];\n\nfunction getHiddenPower(gen: GenerationNum, ivs: StatsTable) {\n  const tr = (num: number, bits = 0) => {\n    if (bits) return (num >>> 0) % (2 ** bits);\n    return num >>> 0;\n  };\n  const stats = {hp: 31, atk: 31, def: 31, spe: 31, spa: 31, spd: 31};\n  if (gen <= 2) {\n    // Gen 2 specific Hidden Power check. IVs are still treated 0-31 so we get them 0-15\n    const atkDV = tr(ivs.atk / 2);\n    const defDV = tr(ivs.def / 2);\n    const speDV = tr(ivs.spe / 2);\n    const spcDV = tr(ivs.spa / 2);\n    return {\n      type: HP_TYPES[4 * (atkDV % 4) + (defDV % 4)],\n      power: tr(\n        (5 * ((spcDV >> 3) +\n          (2 * (speDV >> 3)) +\n          (4 * (defDV >> 3)) +\n          (8 * (atkDV >> 3))) +\n          (spcDV % 4)) / 2 + 31\n      ),\n    };\n  } else {\n    // Hidden Power check for Gen 3 onwards\n    let hpTypeX = 0;\n    let hpPowerX = 0;\n    let i = 1;\n    for (const s in stats) {\n      hpTypeX += i * (ivs[s as StatID] % 2);\n      hpPowerX += i * (tr(ivs[s as StatID] / 2) % 2);\n      i *= 2;\n    }\n    return {\n      type: HP_TYPES[tr(hpTypeX * 15 / 63)],\n      // After Gen 6, Hidden Power is always 60 base power\n      power: (gen < 6) ? tr(hpPowerX * 40 / 63) + 30 : 60,\n    };\n  }\n}\n\nfunction getHiddenPowerIVs(hpType: HPTypeName, data?: Data) {\n  const hp = HP[hpType];\n  if (!hp) return undefined;\n  return data?.gen === 2 ? DVsToIVs(hp.dvs) : hp.ivs;\n}\n\nfunction DVsToIVs(dvs: Readonly<Partial<StatsTable>>) {\n  const ivs: Partial<StatsTable> = {};\n  let dv: StatID;\n  for (dv in dvs) ivs[dv] = toIV(dvs[dv]!);\n  return ivs;\n}\n\nfunction toDV(iv: number) {\n  return Math.floor(iv / 2);\n}\n\nfunction toIV(dv: number) {\n  return dv * 2 + 1;\n}\n\nfunction getHPDV(ivs: Partial<StatsTable>) {\n  return (\n    (toDV(ivs.atk === undefined ? 31 : ivs.atk) % 2) * 8 +\n    (toDV(ivs.def === undefined ? 31 : ivs.def) % 2) * 4 +\n    (toDV(ivs.spe === undefined ? 31 : ivs.spe) % 2) * 2 +\n    (toDV(ivs.spa === undefined ? 31 : ivs.spa) % 2)\n  );\n}\n\nconst tr = (num: number, bits = 0) => bits ? (num >>> 0) % (2 ** bits) : num >>> 0;\n\nfunction calc(\n  gen: GenerationNum,\n  stat: StatID,\n  base: number,\n  iv = 31,\n  ev?: number,\n  level = 100,\n  nature?: Nature\n) {\n  if (ev === undefined) ev = gen < 3 ? 252 : 0;\n  if (gen < 3) {\n    iv = toDV(iv) * 2;\n    nature = undefined;\n  }\n  if (stat === 'hp') {\n    return base === 1 ? base : tr(tr(2 * base + iv + tr(ev / 4) + 100) * level / 100 + 10);\n  } else {\n    const val = tr(tr(2 * base + iv + tr(ev / 4)) * level / 100 + 5);\n    if (nature !== undefined) {\n      if (nature.plus === stat) return tr(tr(val * 110, 16) / 100);\n      if (nature.minus === stat) return tr(tr(val * 90, 16) / 100);\n    }\n    return val;\n  }\n}\n","/* eslint-disable @typescript-eslint/parameter-properties */\nimport {GenerationNum, ID, PokemonSet} from '@pkmn/types';\n\nimport {Data, Sets, _import, _unpack} from './sets';\n\nconst CURRENT = 9;\n\nexport class Team<S extends Partial<PokemonSet> = PokemonSet | Partial<PokemonSet>> {\n  constructor(\n    readonly team: S[],\n    readonly data?: Data,\n    readonly format?: string,\n    readonly name?: string,\n    readonly folder?: string\n  ) {\n    this.team = team;\n    this.format = format;\n    this.name = name;\n    this.folder = folder;\n\n    this.data = data;\n    if (format && data?.forGen) {\n      if (format.slice(0, 3) === 'gen') {\n        this.data = data.forGen(parseInt(format[3]) as GenerationNum);\n      } else {\n        this.format = `gen6${format}`;\n        this.data = data.forGen(6);\n      }\n    }\n  }\n\n  get gen() {\n    return this.data?.gen;\n  }\n\n  pack(): string {\n    return Teams.packTeam(this);\n  }\n\n  static unpack(buf: string, data?: Data) {\n    return Teams.unpackTeam(buf, data);\n  }\n\n  export(data?: Data): string {\n    let buf = '';\n    for (const s of this.team) {\n      buf += Sets.exportSet(s, data || this.data);\n    }\n    return buf;\n  }\n\n  static import(buf: string, data?: Data) {\n    return Teams.importTeam(buf, data);\n  }\n\n  toString(data?: Data) {\n    return this.export(data);\n  }\n\n  static fromString(str: string, data?: Data) {\n    const teams = Teams.importTeams(str, data, true, true);\n    return teams.length ? teams[0] : undefined;\n  }\n\n  toJSON(): string {\n    return JSON.stringify(this.team);\n  }\n\n  static fromJSON(json: string): Team<PokemonSet> | undefined {\n    if (json.charAt(0) !== '[' || json.charAt(json.length - 1) !== ']') {\n      return undefined;\n    }\n    // BUG: this is completely unvalidated...\n    const team: PokemonSet[] = JSON.parse(json);\n    return new Team<PokemonSet>(team);\n  }\n\n  static canonicalize(team: Partial<PokemonSet>[], data: Data) {\n    let lead: Partial<PokemonSet> | undefined = undefined;\n    const rest: Array<[ID, Partial<PokemonSet>]> = [];\n    for (const s of team) {\n      const set = Sets.canonicalize(s, data);\n      if (lead) {\n        rest.push([set.species as ID, set]);\n      } else {\n        lead = set;\n      }\n    }\n    return [lead!, ...rest.sort((a, b) => a[0].localeCompare(b[0])).map(([, set]) => set)];\n  }\n}\n\nexport const Teams = new class {\n  packTeam<S extends Partial<PokemonSet>>(team: Team<S>): string {\n    let buf = '';\n    for (const s of team.team) {\n      if (buf) buf += ']';\n      buf += Sets.packSet(s);\n    }\n    return buf;\n  }\n\n  unpackTeam(buf: string, data?: Data): Team<PokemonSet> | undefined {\n    if (!buf) return undefined;\n    if (buf.charAt(0) === '[' && buf.charAt(buf.length - 1) === ']') {\n      return Team.fromJSON(buf);\n    }\n\n    const team: PokemonSet[] = [];\n    let i = 0, j = 0;\n\n    for (let k = 0; k < 24; k++) {\n      const r = _unpack(buf, i, j, data);\n      if (!r.set) return undefined;\n\n      team.push(r.set);\n      i = r.i;\n      j = r.j;\n\n      if (j < 0) break;\n      i = j + 1;\n    }\n\n    return new Team<PokemonSet>(team, data);\n  }\n\n  importTeam(buf: string, data?: Data): Team | undefined {\n    const teams = Teams.importTeams(buf, data, true);\n    return teams.length ? teams[0] : undefined;\n  }\n\n  importTeams(\n    buf: string,\n    data?: Data,\n    one?: boolean,\n    builder?: boolean,\n  ): Readonly<Team<Partial<PokemonSet>>[]> {\n    const lines = buf.split('\\n');\n    if (lines.length === 1 || (lines.length === 2 && !lines[1])) {\n      const team: Team<PokemonSet> | undefined = builder\n        ? unpackLine(lines[0], data)\n        : Teams.unpackTeam(lines[0], data);\n      return team ? [team] : [];\n    }\n\n    const teams: Team<Partial<PokemonSet>>[] = [];\n\n    let setLine = -1;\n    let team: Partial<PokemonSet>[] = [];\n    for (let i = 0; i < lines.length; i++) {\n      let line = lines[i].trim();\n\n      if (line.substr(0, 3) === '===') {\n        if (one && teams.length) return teams;\n        team = [];\n        line = line.substr(3, line.length - 6).trim();\n        let format = `gen${data?.gen || CURRENT}`;\n        const bracketIndex = line.indexOf(']');\n        if (bracketIndex >= 0) {\n          format = line.substr(1, bracketIndex - 1);\n          line = line.substr(bracketIndex + 1).trim();\n        }\n\n        const slashIndex = line.lastIndexOf('/');\n        let folder = '';\n        if (slashIndex > 0) {\n          folder = line.slice(0, slashIndex);\n          line = line.slice(slashIndex + 1);\n        }\n\n        teams.push(new Team<Partial<PokemonSet>>(team, data, format, line, folder));\n      } else if (line.includes('|')) {\n        // packed format\n        const t = unpackLine(line, data);\n        if (t) teams.push(t);\n      } else if (setLine !== i) {\n        const r = _import(lines, i, data);\n        if (r.set) team.push(r.set);\n        if (r.line === i) {\n          continue;\n        }\n        // Reread the line to find out if we can process what _import couldn't\n        setLine = r.line;\n        i = setLine - 1;\n      }\n    }\n\n    // If we made it here we read in some sets but there was no '===' marker\n    // in the file so we assume only one (unnamed) team.\n    if (team.length && !teams.length) {\n      teams.push(new Team<Partial<PokemonSet>>(team, data));\n    }\n\n    return teams;\n  }\n\n  exportTeams<S extends Partial<PokemonSet>>(teams: Readonly<Team<S>[]>, data?: Data): string {\n    let buf = '';\n\n    let i = 0;\n    for (const team of teams) {\n      buf += '=== ' + (team.format ? '[' + team.format.toString() + '] ' : '') +\n          (team.folder ? '' + team.folder + '/' : '') +\n          (team.name || 'Untitled ' + ++i) + ' ===\\n\\n';\n      buf += team.export(data);\n      buf += '\\n';\n    }\n    return buf;\n  }\n\n  toString<S extends Partial<PokemonSet>>(teams: Readonly<Team<S>[]>, data?: Data): string {\n    return Teams.exportTeams(teams, data);\n  }\n\n  fromString(str: string, data?: Data): Readonly<Team<Partial<PokemonSet>>[]> {\n    return Teams.importTeams(str, data, false, true);\n  }\n};\n\nfunction unpackLine(line: string, data?: Data): Team<PokemonSet> | undefined {\n  const pipeIndex = line.indexOf('|');\n  if (pipeIndex < 0) return undefined;\n\n  let bracketIndex = line.indexOf(']');\n  if (bracketIndex > pipeIndex) bracketIndex = -1;\n\n  let slashIndex = line.lastIndexOf('/', pipeIndex);\n  // line.slice(slashIndex + 1, pipeIndex) will be ''\n  if (slashIndex < 0) slashIndex = bracketIndex;\n\n  const format = bracketIndex > 0 ? line.slice(0, bracketIndex) : `gen${data?.gen || CURRENT}`;\n  const team = Teams.unpackTeam(line.slice(pipeIndex + 1), data);\n  return !team\n    ? team\n    : new Team<PokemonSet>(\n      team.team,\n      data,\n      format,\n      line.slice(slashIndex + 1, pipeIndex),\n      line.slice(\n        bracketIndex + 1, slashIndex > 0 ? slashIndex : bracketIndex + 1\n      ),\n    );\n}\n"]}